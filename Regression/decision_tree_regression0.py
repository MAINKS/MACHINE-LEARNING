# -*- coding: utf-8 -*-
"""decision_tree_regression0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gaz_EsX5_w5hliR9quiEwNEwxk09V11w

# Decision Tree Regression

Easiest Code implementation , check for missing data & encoding categorical data within the dataset , else implementation is same below & easy.

Feature scaling & Splitting dataset b/w training & test set is not required in Decision tree regression.

Splitting of data is not required as the obtained result and prediction in decision tree & Random forest is obtained from splitting data at each node and so on.

No equations like Linear multiple & polynomial regression that require feature scaling for predicting.

Decision tree regression model is not really well adapted to Simple dataset like position salaries with only one dependent & independent variable. Highly adaptive to the High dimensional various features dataset.

Without applying grid solution , Decision tree provides low resolution curve.

'DecisionTreeRegressor' class of 'Tree' module of 'sklearn' library is used in Decision tree.

## Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset  = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:,1:-1].values
y = dataset.iloc[:,-1].values

"""## Training the Decision Tree Regression model on the whole dataset

To get the same result at the end , random state is applied to fix the random features affecting the decison tree predictions.
"""

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state=0)
regressor.fit(X,y)

"""## Predicting a new result"""

#from values in dataset , decision tree regressor trained on it & now a new for value of X , it predicted value of y

regressor.predict([[6.5]])

regressor.predict([[200]])

"""## Visualising the Decision Tree Regression results (higher resolution)"""

X_grid = np.arange(min(X),max(X),0.1)
X_grid = X_grid.reshape((len(X_grid),1))
plt.scatter(X,y,color='red')
plt.plot(X_grid,regressor.predict(X_grid),color='blue')
plt.title('Decision Tree Regeression')
plt.xlabel('Position Levels of the employee')
plt.ylabel('Salary corresponding to that level')
plt.show()

# Obtained curve of Decsion tree regression provides the prediction within range having same value as ,
# Salary corresponding to range of 1.5 to 2.5 have same value of salary as data splitting is there & so not that
# accurate and adaptive on small features dataset.