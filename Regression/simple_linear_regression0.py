# -*- coding: utf-8 -*-
"""simple_linear_regression0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cyYI3ciG7yhQUODv6dQCX2B76i5xhxco

# Simple Linear Regression

#Model 1

Regression is when you have to predict the numerical value & Classification is used for predicting category based on dataset.
One independent & dependent variable in Simple linear regression.
Plotting curve b/w two numerical values , ie: Two columns

Least square method is used to predict the best fit out of various linear curves in Simple linear regression.
As there is diff b/w actual to predicted value
Y=b0+b1x1 , value of b0 & b1 predicted as sum of thesquares of residuals(yˆ)=Actual-predicted value for every single
Data points is minimised.
Sum (yi-yiˆ)ˆ2 and the minimum value obtained is best regression line used for program modelling.

y=b0+b1x1 linear relation - One dependent & independent variable only.

## Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Importing the dataset"""

dataset=pd.read_csv('Salary_Data.csv')
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y , test_size=0.2 , random_state=0)

"""## Training the Simple Linear Regression model on the Training set"""

#Using LinearRegression classs of linear_model module from scikit learn library

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()        #linear regression model created using object of Linear regression class
regressor.fit(X_train,y_train)        #fit method is used to train the model

"""# Predicting the Test set results"""

#As linear regression model is created on train test, using test set we are gonna predict the values of y.
#For this we're gonna use PREDICT method

y_predict = regressor.predict(X_test)

"""# Visualising the Training set results"""

#plotting the training set predicted values for using matplotlib.pyplot library

plt.scatter(X_train,y_train,color='black')                  #It will plot the points b/w X_train vs y_train actual values using Module "Scatter".
plt.plot(X_train,regressor.predict(X_train),color='red')  #plot the predicted values on Training set
plt.title('Salary vs experience(training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()                                                 #To graphically show the output

"""## Visualising the Test set results"""

plt.scatter(X_test,y_test,color='black')             #Plotting points b/w x_test and y_test
plt.plot(X_train,regressor.predict(X_train),color='red')  #regression line obtained will be same for both train & test set
plt.title('Salary vs experience(training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

#Obtained results on test set is closer to actual values of salarys.
#We've got much better accuracy because of the linear relationship b/w our dataset values.

"""#Important Questions

Linear Regression is one of the most commonly used statistical modeling methods in data science. It’s also a topic that attracts many questions from our community of students.

This free bonus download tackles two of the most frequently asked questions regarding Linear Regression, and walks you through, step-by-step, to help you solve them with confidence—code included!

Question 1: How do I use my simple linear regression model to make a single prediction, for example, to predict the salary of an employee with 12 years of experience?

Question 2: How do I get the final regression equation y = b0 + b1 x with the final values of the coefficients b0 and b1?

Here’s the step-by-step coding exercise you receive in this Google Colab bonus:

Importing libraries and datasets

Splitting the dataset

Training the simple Linear Regression model on the Training set

Predicting and visualizing the test set results

Visualizing the training set results

Making a single prediction

Getting the final linear regression equation (with values of the coefficients)

#Making a single prediction (for example the salary of an employee with 12 years of experience)
"""

print(regressor.predict([[12]]))

"""Therefore, our model predicts that the salary of an employee with 12 years of experience is $ 138967,5.

Important note: Notice that the value of the feature (12 years) was input in a double pair of square brackets. That's because the "predict" method always expects a 2D array as the format of its inputs. And putting 12 into a double pair of square brackets makes the input exactly a 2D array. Simply put:

12→scalar

[12]→1D array

[[12]]→2D array

#Getting the final linear regression equation with the values of the coefficients
"""

print(regressor.coef_)
print(regressor.intercept_)

"""Therefore, the equation of our simple linear regression model is:

$$\textrm{Salary} = 9345.94 \times \textrm{YearsExperience} + 26816.19$$

**Important Note:** To get these coefficients we called the "coef_" and "intercept_" attributes from our regressor object. Attributes in Python are different than methods and usually return a simple value or an array of values.
"""