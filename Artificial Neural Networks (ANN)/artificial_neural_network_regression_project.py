# -*- coding: utf-8 -*-
"""Artificial Neural Network_Regression_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QI-XhIxyQ27y-XRrCPlBth9NV43Rf6Ad

#Project - Artificial Neural Network model based on Regression

### For a large dataset within a organisation working in Manufacturing field , using ANN implementation , predicting the Output - Electrical energy power as per the circumstances given under Pressure , Temperature & Humidity, Vaccum etc.

### Importing the libraries
"""

import pandas as pd
import numpy as np
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_excel('Folds5x2_pp.xlsx')   #To read excel files using pandas , pd.read_excel is used
X = dataset.iloc[: , :-1].values
y = dataset.iloc[: , -1].values

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train , X_test , y_train, y_test = train_test_split(X,y , test_size=0.2 , random_state = 0)

print(X_train)
print('\n')
print(X_test)
print('\n')
print(y_train)
print('\n')
print(y_test)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation= 'relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation= 'relu'))

"""### Adding the output layer"""

ann.add(tf.keras.layers.Dense(units=1))

#No activation function required for the regression as o/p is numerical,
#only for classification, sigmoid (2 categories) or softmax(3 categories) activation fn it is required as we Obtain categorical data of larger scope

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

ann.compile(optimizer ='adam' , loss = 'mean_squared_error' , )

#mean_squared_error is loss fxn while implementing ANN in Regression , binary_crossentropy for classification

"""### Training the ANN model on the Training set"""

ann.fit(X_train , y_train , batch_size = 32, epochs = 100)

"""### Predicting the results of the Test set"""

y_pred = ann.predict(X_test)

np.set_printoptions(precision = 2)   #numpy sets decimal point precison after 2 decimals
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

print('\n')
print('Here we have our Predicted output')
print(y_pred)

#Our Artificial neural network predicted the values accurately , very close to real results
#In this way here prediction Of EP(Net hourly Electrical Energy Output) is predicted well by ANN for Manufacturing Company