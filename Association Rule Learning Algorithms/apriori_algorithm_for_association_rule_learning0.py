# -*- coding: utf-8 -*-
"""Apriori_Algorithm_for_Association_Rule_Learning0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QMa20K6zN_bxSsVHNoBcc--09ye5D_mH

# Apriori

Dataset of SuperMarket having more than 7500 transactions of various users & items purchased ,

based on dataset as a Data scientist , build a Association rules for these transactions to find best deals for their clients  to convert users & increase profit.

Lift = confidence / support to find the relevance in association rule learning

Scikit learn is not used for apriori algo , apyori library will be used.
"""

#Install apyori library from the web used for association rule learning Apriori algorithm

!pip install apyori

"""## Importing the libraries"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""## Data Preprocessing"""

dataset = pd.read_csv('Market_Basket_Optimisation.csv', header = None ) #Header = None signify our dataset has no columns as in previous datasets , but it's row wise data for various users
#Apriori doesn't takes dataset as pandas dataframe , we need to convert it to "lists" of transaction listed one by one of items of 7501 user.
#Each item in Big list = Transaction list contains small small 7501 list of transactions , converted using str fxn.
#Maximum items in datset's one row is 20 , So a vertical loop to add them one by one is to be added also from 0 to 20

transactions =[]
for i in range(0,7501):
  transactions.append([str(dataset.values[i,j]) for j in range(0,20)])


#first all rows are defined , then each item from column is added simultaneously.

#In this way loop points on each row then column & adds it to transaction list with sublist of each row in it
#These items stored in Transactions list is in the str form & is required.

print(transactions)

"""## Training the Apriori model on the dataset"""

from apyori import apriori
rules = apriori(transactions , min_support = 0.003, min_confidence = 0.2 , min_lift = 3, min_length = 2 , max_lenght = 2)

#This model will provide rules for support , confidence & list for performing recommendation
#From apyori installed library , class apriori is used to perform association algo
# while training apriori algo on transaction list , dataset , min support , confidence , list and lift is to be providedvt
#min & max length = no of items/elements in one row of the transaction list left to right.

# Support = item x1 / Total transactions
# Confidence = item x2 / item x1
# Lift = Confidence / Support

"""## Visualising the results

### Displaying the first results coming directly from the output of the apriori function
"""

#Put all our rules generated into a list name Results

results = list(rules)
results

"""### Putting the results well organised into a Pandas DataFrame"""

# Obtained result is so messed up , converting onto pandas dataframe back for better illustration .
#Also lift , support & confidence are not ordered in either way , gonna perform descending order on result.

#Lhs & Rhs are item name - sauce , cream , veggies etc

#Python function inspect will take these results as i/p & convert to matrix dataframe
#it will fetch lhs , rhs then support , confidence & lift in a tuple , then reultant matrix/table will have columns equivalent to these tuples
# in pandas dataframe format.

#playing with indexes formatlly & accessed the required table as :
# result[2][0][2] = inside rows , elements of index 2 , then it's 0th index ,then it's 2nd index element accessed = connfidence values

def inspect(results):
    product1          = [tuple(result[2][0][0])[0] for result in results]
    product2          = [tuple(result[2][0][1])[0] for result in results]
    supports     = [result[1] for result in results]
    confidences  = [result[2][0][2] for result in results]
    lifts        = [result[2][0][3] for result in results]
    return list(zip(product1,product2, supports, confidences, lifts))
resultsinDataFrame = pd.DataFrame(inspect(results), columns = ['product1', 'product2', 'Support', 'Confidence', 'Lift'])

"""### Displaying the results non sorted"""

#Here dataframe table of Apriori performed data is now displayed unsorted (same as it displayed in list) - randomly arranged
#just write variable name to print it's value

resultsinDataFrame

"""### Displaying the results sorted by descending lifts"""

#Now sorting in descending - larger lift value to smallest

# nlargest function of pandas library is used to sort values.
# Arguments = no of rows , which columns to sort                  , n= 10 will give 10 best rows with highest lift

resultsinDataFrame.nlargest(n =10 , columns = 'Lift')

# Based on highest lift values of Lhs & Rhs items , owner can put offer for (buy 1 get 1) or the other offer , as customers buy these
# associative products. In this way apriori algo is performed & optimise the product sale.


#If you want to obtain more than 2 combinaions of Product/service based on Total dataset , increase min_lenght & max_length consecutively.

#APRIORI model provides high accuracy as compared to ECLAT due to 3 factors used for combination & association