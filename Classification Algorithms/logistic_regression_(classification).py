# -*- coding: utf-8 -*-
"""Logistic_Regression_(Classification).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pmK-e_5A6hX9p6yjb-V8gIistIfDdNHu

# Logistic Regression

---

Major Theory from PPT'S

**Logistic regresion** is an **Classification Algorithm** , as per name it's not a regression model where you predict a numerical value based in dataset but it is Used to predict the categorical dependent variable based on various independent variables.

Difference b/w linear and logistic regression , is here we're not predicting a numerical variable but a categirical variable.


Ex : Based on Age as Independent variable , if we've to predict whether X will purchase a health insurance or not is done.


Whether a user will purchase a Newly launched Suv or not based on dataset having independent variables Age & Salary with dependent variable purchase or not.

Based on your predictions as Data Scientist , Specific age and salary users will be targeted by Advertising team for the sale generationof our Suv.

## Importing the libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Importing the Dataset"""

dataset = pd.read_csv('Social_Network_Ads.csv')
X = dataset.iloc[:,:2].values      #or [:,:-1] both correct
y = dataset.iloc[:,2].values       #or [:,-1]
print(X)
print('\n')
print(y)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X , y , test_size=0.25 , random_state=0)   #400 rows , 0.25 = 300 train , 100 test

print(X_train)
print('\n')
print(X_test)
print('\n')
print(y_train)
print('\n')
print(y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler      #b/w -3 & 3
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)
print(X_train)
print('\n')
print(X_test)

"""## Training the Logistic Regression model on the Training set"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)      #It's a classification not regression , so classifier object instead of regressor
classifier.fit(X_train,y_train)

"""## Predicting a new result"""

#predicting user will purchase or not of Age = 30 and Salary = 87000
#These values are Original values but model is trained on the feature Scaled values - So we need to transform them to scaled values before
#predicting them on our Logistic regression classifer model.  Transform will scale values as i/p to actual feature scaled X matrices.

#Predicitons can be only applied to dataset with same scaled values to be predicted.


y_pred = classifier.predict(sc.transform([[30,87000]]))   #[[]] - 2d array input format
print(y_pred)


# 0 Signifies our model classified the User won't purchase Suv based on trained dataset on logistic Regression.

"""## Predicting the Test set results"""

#Vector of predictions to vector of real results
#np.concatenate((matrix1 ,matrix2))

y_pred = classifier.predict(X_test)   #Produce predicted y values for X test matrix
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))   #printing both predicted values obtained above
#and y values in y_test matrix afte reshaping to column wise and concatenating in a single array

"""## Making the Confusion Matrix"""

#There are many false predictions that contradict to real results
#Confusion matrix shows no of correct & incorrect predictions (0 or 1) - create an array of falsely predicted values

#Accuracy score to predict accuracy of predicted to the test values -

from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,y_pred))

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

#63 correct predictions of class 1 -Yes.       3 incorrect predictions
#24 correct predictions of class 0 - No        8 incorrect predictions
#87% of correct predictions -63+24=87

"""## Visualising the Training set results"""

#Each plot on graph represents each datapoint / dataset row  corresponding to One age & salary feature
#This code is pretty advanced & used in logistic regression only - training purpose only.

#We will work on dataset with many features-more than two majorly
#Here we're using two features for prediction regions and boundary and one feature corresponds to one axis here.

#Don't invest prior time to remember this up !

from matplotlib.colors import ListedColormap
X_set, y_set = sc.inverse_transform(X_train), y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

#Real results from dataset -  blue points corresponds to the users who bought Suv previously & red who haven't bought.
#Red region - Predictions that customer didn't purchased
#Blue region -Predictions that customer purchased
#Correct predictions are one with same colured region having same datapoints & vice versa are "OUTLIERS"
#Blue dataspoint in the red region indiactes false prediction - as Customer bought suv but model predicted user didn't & vice versa for other.
#Prediction boundary is where Classifier separates the two regions blue & red.
#Here prediction boundary is linear as logistic regression here is linear classifier

"""## Visualising the Test set results"""

X_set, y_set = sc.inverse_transform(X_test), y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('salmon', 'dodgerblue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('salmon', 'dodgerblue'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()

#Well predicted with few Outliers
#To better predict more accurately , prediction boundary need to be bounded well (curve) - using non linear classifiers